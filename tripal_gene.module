<?php

/**
 * Implementation of hook_permissions()
 * 
 * Set the permission types that this module uses. Essentially we
 * want permissions that protect creation, editing and deleting of
 * chado data objects
 *
 * Uses Drupal module Light Shop https://www.drupal.org/project/lightshop to create 
 * gene "basket" at top of search form.
 *   To modify: /admin/structure/blocks
 *
 * @ingroup tripal_gene
 *
 */

require_once 'includes/tripal_gene.admin.inc';
require_once 'includes/tripal_gene.chado_node.inc';

/**
 * tripal_gene_add_all_handler()
 */
function tripal_gene_add_all_handler($form, &$form_state) {
  module_load_include('inc', 'geneshop', 'geneshop.pages');

  $view = views_get_view('gene');
  //in order to get all the results of the view, set items per page to 0
  $view->set_items_per_page(0);
  $view->execute();
  $results = $view->result;

  foreach ($results as $res) {
    $sql =<<<SQL
        SELECT g.*, chf.nid
        FROM chado.gene g, public.chado_feature chf
        WHERE g.gene_id = chf.feature_id AND g.name = :name
SQL;
    $args = array(':name' => $res->gene_name);
    $gene = chado_query($sql, $args)->fetchObject();

    if ($gene) {
      $node = node_load($gene->nid);
                geneshop_add2basket($node);
    }
  }
  
  return;
}


/**
 * Implementation of hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 *
 * @ingroup tripal_organism
 */
function tripal_gene_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && strstr($form['#id'], 'gene')) { 
    $form['#validate'][] = 'tripal_gene_form_validate'; 

    // Change default value for submit button
    $form['submit']['#value'] = 'Search';
  }

  $form['#method'] = 'post';
  switch ($form_id) {
    case 'chado_gene_node_form':
      // turn of preview button for insert/updates
      $form['actions']['preview']['#access'] = FALSE;
      
      //remove the body field
      unset($form['body']);
      break;
    case 'views_exposed_form':
      if ($form['#id'] == 'views-exposed-form-gene-page') {
        // Add a button
        $form['submit_basket']['#type'] = 'submit';
        $form['submit_basket']['#value'] = t('Add all genes to Basket');
        $form['submit_basket']['#submit'] = array('tripal_gene_add_all_handler', 'views_exposed_form_submit');
        $form['submit_basket']['#executes_submit_callback'] = 1;
      }
      break;
  } //switch
}


/**
  * Form validator for search form.
  *
  * Use this to trim whitespace from text fields.
  */
function tripal_gene_form_validate($form, &$form_state) { 
  if (isset($form_state['values']['domains']))
    $form_state['values']['domains']     = trim($form_state['values']['domains']); 
  if (isset($form_state['values']['description']))
    $form_state['values']['description'] = trim($form_state['values']['description']); 
  if (isset($form_state['values']['gene_family']))
    $form_state['values']['gene_family'] = trim($form_state['values']['gene_family']); 
  if (isset($form_state['values']['name']))
    $form_state['values']['name']        = trim($form_state['values']['name']); 
}
  

/**
 * Implements hook_help().
 * Adds a help page to the module list
 *
 * @ingroup tripal_organism
 */
function tripal_gene_help ($path, $arg) {
  if ($path == 'admin/help#tripal_gene') {
    return theme('tripal_gene_help', array());
  }
}


/**
 * Implements hook_menu().
 * Menu items are automatically added for the new node types created
 * by this module to the 'Create Content' Navigation menu item.  This function
 * adds more menu items needed for this module.
 *
 * @ingroup tripal_gene
 */
function tripal_gene_menu() {
  $items = array();
  // the administative settings menu
  $items['admin/tripal/chado/tripal_gene'] = array(
    'title' => 'Gene Search',
    'description' => 'Gene search allows retrieval of gene information.',
    'page callback' => 'tripal_gene_admin_gene_view',
    'access arguments' => array('administer tripal gene'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/tripal/chado/tripal_gene/help'] = array(
    'title' => 'Help',
    'description' => "Help for using the gene module",
    'page callback' => 'theme',
    'page arguments' => array('tripal_gene_help'),
    'access arguments' => array('administer tripal gene'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10
  );


  $items['admin/tripal/chado/tripal_gene/views/enable'] = array(
    'title' => 'Enable Gene Administrative View',
    'page callback' => 'tripal_enable_view',
    'page arguments' => array('tripal_gene_admin_gene', 'admin/tripal/chado/tripal_gene'),
    'access arguments' => array('administer tripal gene'),
    'type' => MENU_CALLBACK,
  );  
  return $items;
}


function tripal_gene_permission() {
  return array(
    'access chado_gene content' => array(
      'title' => t('View Genes'),
      'description' => t('Allow users to view gene pages.'),
    ),
    'create chado_gene content' => array(
      'title' => t('Create Gene'),
      'description' => t('Allow users to create new gene pages.'),
    ),
    'delete chado_gene content' => array(
      'title' => t('Delete Gene'),
      'description' => t('Allow users to delete gene pages.'),
    ),
    'edit chado_gene content' => array(
      'title' => t('Edit Gene'),
      'description' => t('Allow users to edit gene pages.'),
    ),
    'administer tripal gene' => array(
      'title' => t('Administer Gene'),
      'description' => t('Allow users to administer all genes.'),
    ),
  );
}


/**
 *  Implements hook_theme().
 *
 *  We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 *
 * @ingroup tripal_organism
 */
function tripal_gene_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'tripal_gene');

  $items = array(
    'tripal_gene_base' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_gene_base',
      'path' => "$path/theme/templates",
    ),
    'tripal_gene_sequence' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_gene_sequence',
      'path' => "$path/theme/templates",
    ),
    'tripal_gene_rnai' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_gene_rnai',
      'path' => "$path/theme/templates",
    ),

    'tripal_gene_expression' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_gene_expression',
      'path' => "$path/theme/templates",
    ),
  );
 
  return $items;
}


/**
 * Implements hook_views_api().
 *
 * Essentially this hook tells drupal that there is views support for
 *  for this module which then includes tripal_db.views.inc where all the
 *  views integration code is
 *
 * @ingroup tripal_organism
 */
function tripal_gene_views_api() {
  $path = drupal_get_path('module', 'tripal_gene');
  return array(
    'api' => 3.0,
    'path' => $path . '/views',
  );
}


/**
  * hook_views_query_alter()
  *
  * Modify the query before it is executed.
  */
function tripal_gene_views_query_alter(&$view, &$query) {
  // If a term is set in the description field, use it to search OBO terms as well as
  //    description fields
  if (isset($view->exposed_raw_input['description']) && ($term = $view->exposed_raw_input['description'])) {
    // Get matching terms and their childern
    if ($child = getAllRelated($view->exposed_raw_input['description'])) {
      // Remove description search from existing filter conditions
      foreach (array_keys($query->where) as $i) {
        for ($j=0; $j<count($query->where[$i]['conditions']); $j++) {
           if ($query->where[$i]['conditions'][$j]['field'] == 'gene.description') {
             unset($query->where[$i]['conditions'][$j]);
           }
         }//each condition clause
       
         // Get rid of this where clause if empty
         if (count($query->where[$i]['conditions']) == 0) {
           unset($query->where[$i]);
         }
      }//each condition

      // Create an OR condition between the description LIKE condition and gene name
      //   IN condition
      $query->where[] = array(
        'conditions' => array(
          0 => array(
                 'field'    => 'gene.description',
                 'value'    => "%$term%",
                 'operator' => 'LIKE',
               ),
          1 => array(
                 'field'    => 'gene.name',
                 'value'    => array_keys($child),
                 'operator' => 'IN',
               ),
          ),
        'type' => 'OR',
      );
    }//found OBO terms
  }//search OBO terms for description term
}//tripal_gene_form_validate


function getAllRelated($term) {
  // Set ontologies to search:
  $search_ontologies = array();
  $sql = "
    SELECT cv_id, name FROM {cv} 
    WHERE name IN ('biological_process', 'gene_ontology', 'molecular_function','cellular_component')";
   
  $results = chado_query($sql);
  foreach ($results as $r) {
    $search_ontologies[$r->cv_id] = $r->name;
  }
  
  // Get similar terms
  $child_obo_terms = array();
  
  $obo_terms = ontology_search_setSimilarTerms($term, $search_ontologies, false); 
  if ($obo_terms) {
    foreach (array_keys($obo_terms) as $cvterm_id) {
      //drupal_set_message("am i 0");
      if ($children = ontology_search_getChild($cvterm_id)) {
        foreach ($children as $child) {
          $child_obo_terms[$child['cvterm_id']] = $child['accession'];
        }
      }
    }//each trait OBO term
  }

  $child_gene = false;
  if (count(array_keys($child_obo_terms)) > 0) {
    $b = array_keys($child_obo_terms);
    $nql = "
      SELECT f.name AS fname, c.name AS cname FROM {cvterm} c 
        INNER JOIN {feature_cvterm} fc ON fc.cvterm_id=c.cvterm_id 
        INNER JOIN {feature} f ON f.feature_id=fc.feature_id 
      WHERE c.cvterm_id IN(".implode(',',$b).") 
            AND f.type_id IN (SELECT x.cvterm_id FROM {cvterm} AS x 
                              WHERE x.name='gene' AND cv_id =(SELECT cv_id FROM {cv} AS v 
                                                              WHERE v.name='sequence'))";

    $ree = chado_query($nql);
    $child_gene = array();
    $i = 0;
    foreach($ree as $a) {    
      $child_gene[$a->fname] = $a->cname;
      $i++;
    }
  }
  
  return $child_gene;
}//getAllRelated


function getJBrowseURL($gene_id) {
  if (!$gene_id) {return false;}
  
  $sql = "
    SELECT f.name, chr.name AS chr, x.accession, fl.fmin, fl.fmax, db.db_id, 
           db.urlprefix
    FROM {feature} f
      INNER JOIN {featureloc} fl ON fl.feature_id=f.feature_id
      INNER JOIN {feature} chr ON chr.feature_id=fl.srcfeature_id
      INNER JOIN {feature_dbxref} fx ON fx.feature_id=chr.feature_id
      INNER JOIN {dbxref} x ON x.dbxref_id=fx.dbxref_id
      INNER JOIN {db} ON db.db_id=x.db_id
    WHERE chr.type_id IN (SELECT cvterm_id FROM {cvterm} 
                          WHERE name IN ('chromosome', 'contig', 'supercontig'))
          AND  LOWER(db.name) LIKE '%jbrowse%'
          AND f.feature_id=$gene_id";
  $result = chado_query($sql);
  foreach ($result as $r) {
    $start = ($r->fmin-200 > 0) ? $r->fmin - 200 : 0;
    $stop  = $r->fmax + 200;
    return array(
      'url'   => $r->urlprefix,
      'chr'   => $r->accession, 
      'start' => $start,
      'stop'  => $stop,
    );
  }
            
  return false;
}



function gene_description_linkouts($description) {
  $pattern = '/(GO:\d+)/i';
  $replacement = '<a href="http://amigo.geneontology.org/amigo/term/${1}">${1}</a>';
  $description = preg_replace( $pattern , $replacement , $description);

  $pattern = '/(IPR\d+)/i';
  $replacement = '<a href="http://www.ebi.ac.uk/interpro/entry/${1}">${1}</a>';
  $description = preg_replace( $pattern , $replacement , $description);

  return $description;
}

function gene_domains_linkouts($domains) {
  //eg. http://pfam.xfam.org/family/PF12854
  $pattern = '/(PF\d+)/';
  $replacement = '<a href="http://pfam.xfam.org/family/${1}">${1}</a>';
  $domains = preg_replace( $pattern , $replacement , $domains);

  //eg. http://pantherdb.org/panther/family.do?clsAccession=PTHR32125
  $pattern = array('/(PTHR\d+\s+)/','/(PTHR\d+$)/');
  $replacement = '<a href="http://pantherdb.org/panther/family.do?clsAccession=${1}">${1}</a>';
  $domains = preg_replace( $pattern , $replacement , $domains);

  $pattern = '/(PTHR\d+)(:SF\d+)/';
  $replacement = '<a href="http://pantherdb.org/panther/family.do?clsAccession=${1}">${1}${2}</a>';
  $domains = preg_replace( $pattern , $replacement , $domains);

  //eg. https://prosite.expasy.org/PS50171
  $pattern = '/(PS\d+)/';
  $replacement = '<a href="https://prosite.expasy.org/${1}">${1}</a>';
  $domains = preg_replace( $pattern , $replacement , $domains);

   //eg. http://smart.embl.de/smart/do_annotation.pl?DOMAIN=SM01050
  $pattern = '/(SM\d+)/';
  $replacement = '<a href="http://smart.embl.de/smart/do_annotation.pl?DOMAIN=${1}">${1}</a>';
  $domains = preg_replace( $pattern , $replacement , $domains);

  //eg. http://supfam.org/SUPERFAMILY/cgi-bin/scop.cgi?sunid=50249
  $pattern = '/(SSF\d+)/';
  $replacement = '<a href="http://supfam.org/SUPERFAMILY/cgi-bin/scop.cgi?sunid=${1}">${1}</a>';
  $domains = preg_replace( $pattern , $replacement , $domains);
  // remove SSF from the search param. there is a better way
  $domains = preg_replace('/(cgi\?sunid=SSF)/','cgi?sunid=', $domains);

  //eg. http://www.cathdb.info/version/latest/superfamily/1.20.1250.20
  $pattern = '/(G3DSA:)(\d+\.\d+\.\d+\.\d+)/';
  $replacement = '<a href="http://www.cathdb.info/version/latest/superfamily/${2}">${1}${2}</a>';
  $domains = preg_replace( $pattern , $replacement , $domains);

  //eg. http://www.jcvi.org/cgi-bin/tigrfams/HmmReportPage.cgi?acc=TIGR00861
  $pattern = '/(TIGR)(\d+)/';
  $replacement = '<a href="http://www.jcvi.org/cgi-bin/tigrfams/HmmReportPage.cgi?acc=${1}${2}">${1}${2}</a>';
  $domains = preg_replace( $pattern , $replacement , $domains);

  return $domains;
}

